@use 'sass:math';
@import 'css/custom/_required.scss';

.btn {
  align-items: center;
  cursor: pointer;
  display: flex;
  justify-content: center;
  max-height: $btn-height;
  min-height: $btn-height;

  &.sm {
    max-height: $btn-height-sm;
    min-height: $btn-height-sm;
  }

  &.lg {
    max-height: $header-height;
    min-height: $header-height;
  }

  &.start {
    &, & .label {
      justify-content: flex-start;
    }
  }

  &.end {
    &, & .label {
      justify-content: flex-end;
    }
  }

  &.center {
    &, & .label {
      justify-content: center;
    }
  }

  &.between {
    justify-content: space-between;
  }
}

.round {
  border-radius: math.div($btn-height,2);

  &.sm {
    border-radius: math.div($btn-height-sm,2);
  }

  &.lg {
    border-radius: math.div($btn-height,2);
  }
}

.square {
  max-width: $btn-height;
  min-width: $btn-height;
  padding-left: 0;
  padding-right: 0;

  &.sm {
    max-width: $btn-height-sm;
    min-width: $btn-height-sm;
  }

  &.lg {
    max-width: $header-height;
    min-width: $header-height;
  }
}

.label {
  align-items: center;
  display: flex;
  flex-grow: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;

  .order-2 + & {
    order: 1;
  }

  .order-1 + & {
    order: 2;
  }

  :global(.badge) {
    top: 0;
  }
}

.icon {
  position: relative;

  &.xs {
    height: $sprite-size-xs;
    width: $sprite-size-xs;
  }
  &.sm {
    height: $sprite-size-sm;
    width: $sprite-size-sm;
  }
  &.md {
    height: $sprite-size-md;
    width: $sprite-size-md;
  }
  &.lg {
    height: $sprite-size-lg;
    width: $sprite-size-lg;
  }

  &:not(:last-child) {
    &.order-1 {
      margin-right: $btn-padding-x;
      order: 1;

      .sm & {
        margin-right: $btn-padding-x-sm;
      }

      .lg & {
        margin-right: $btn-padding-x-lg;
      }

      .link & {
        margin-right: .8rem;
      }
    }

    &.order-2 {
      margin-left: $btn-padding-x;
      order: 2;

      .sm & {
        margin-left: $btn-padding-x-sm;
      }

      .lg & {
        margin-left: $btn-padding-x-lg;
      }

      .link & {
        margin-left: .8rem;
      }
    }
  }
}
.iconColor{
color: white;
}
.sprite {
  position: absolute;

  &.hoverSprite {
    opacity: 0;
  }

  .btn:hover & {
    &:not(.hoverSprite):not(:last-child) {
      opacity: 0;
    }

    &.hoverSprite {
      opacity: 1;
    }
  }
}


// VARIANTS

@mixin solid-button($color: $primary) {
  background-color: $color;
  border-color: $color;
  color: $white;

  @include hover {
    box-shadow: 0px 4px 8px transparentize($color, .8);
  }

  @include active {
    background-color: mix($black, $color, 20%);
    border-color: mix($black, $color, 20%);
    box-shadow: none;
  }

  @include disabled {
    background-color: mix($white, $color, 30%);
    border-color: mix($white, $color, 30%);
    box-shadow: none;
  }
}

@mixin outline-button($color: $primary) {
  background-color: transparent;
  border-color: $color;
  color: $color;

  @include hover {
    background-color: $color;
    box-shadow: 0px 4px 8px transparentize($color, .8);
    color: $white;
  }

  @include active {
    background-color: mix($black, $color, 20%);
    border-color: mix($black, $color, 20%);
    box-shadow: none;
    color: $white;
  }

  @include disabled {
    background-color: transparent;
    border-color: mix($white, $color, 80%);
    color: mix($white, $color, 60%);
    box-shadow: none;
  }
}

@mixin link-button($color: $primary) {
  background-color: transparent;
  border: 0;
  color: $color;
  display: inline-flex;
  line-height: inherit;
  min-height: inherit;
  min-width: inherit;
  padding: 0;
  text-decoration: none;

  @include hover-focus {
    color: mix($black, $color, 15%);
  }

  @include active {
    color: mix($black, $color, 30%);
  }

  @include disabled {
    color: mix($white, $color, 20%);
  }
}

@each $color, $value in $theme-colors {
  .#{$color} {

    &.solid {
      @include solid-button($value);
    }

    &.outline {
      @include outline-button($value);
    }

    &.link {
      @include link-button($value);
    }
  }
}
